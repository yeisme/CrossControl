name: C++23 Multi-Compiler CI (CMake Workflow)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Linux 平台：GCC/Clang 构建（复用CMake workflow presets）
  linux-build:
    name: Linux | ${{ matrix.workflow-preset }}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        workflow-preset:
          [
            "gcc-debug-workflow",
            "gcc-release-workflow",
            "clang-debug-workflow",
            "clang-release-workflow",
          ]
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install latest compilers (C++23 support)
        run: |
          # 安装基础依赖
          sudo apt-get update
          sudo apt-get install -y ninja-build libgl1-mesa-dev libxcb-xinerama0 dpkg-dev

          # 根据工作流判断编译器类型
          if [[ "${{ matrix.workflow-preset }}" == *"gcc"* ]]; then
            # 安装GCC 14（支持C++23）
            sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
            sudo apt-get update
            sudo apt-get install -y gcc-14 g++-14
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
            g++ --version  # 验证版本
          else
            # 安装Clang 18（支持C++23）
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh 18
            sudo apt-get install -y libc++-18-dev libc++abi-18-dev
            sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
            sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
            clang++ --version  # 验证版本
          fi

      - uses: lukka/get-cmake@latest

      - name: Set up Qt 6
        id: install-qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "6.8.3"
          host: "linux"
          arch: "gcc_64"
          cache: true

      - name: Set up vcpkg (download + bootstrap, no install)
        uses: lukka/run-vcpkg@v11
        with:
          # keep vcpkg sources in the repository workspace
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          # do not run `vcpkg install` here; let CMake (via toolchain) perform installs
          runVcpkgInstall: false

      - name: Run CMake workflow (use lukka/run-cmake@v10)
        uses: lukka/run-cmake@v10
        with:
          workflowPreset: ${{ matrix.workflow-preset }}
        env:
          QT6_DIR: ${{ steps.install-qt.outputs.install_prefix }}
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg
          CMAKE_CXX_STANDARD: 23 # 强制C++23标准

      - name: Upload release artifacts
        if: ${{ contains(matrix.workflow-preset, 'release') }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.workflow-preset }}-artifacts
          path: ${{ github.workspace }}/${{ contains(matrix.workflow-preset, 'gcc') && 'gcc-release' || 'clang-release' }}/*

  # Windows 平台：MSVC 构建（复用CMake workflow presets）
  windows-build:
    name: Windows | ${{ matrix.workflow-preset }}
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        workflow-preset: ["msvc-debug-workflow", "msvc-release-workflow"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Visual Studio (支持C++23)
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: "latest" # 使用最新VS，默认支持C++23

      - name: Set up Qt 6
        id: install-qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "6.8.3"
          host: "windows"
          arch: "win64_msvc2022_64"
          cache: true

      - name: Set up vcpkg (download + bootstrap, no install)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          runVcpkgInstall: false

      - name: Install required vcpkg packages (explicit)
        if: always()
        run: |
          # Install fmt and spdlog explicitly to match previous behavior.
          # Use the Windows triplet (x64-windows) used by CI.
          $vcpkg = "${{ github.workspace }}\vcpkg\vcpkg.exe"
          & $vcpkg install fmt:x64-windows spdlog:x64-windows

      - name: Run CMake workflow (use lukka/run-cmake@v10)
        uses: lukka/run-cmake@v10
        with:
          workflowPreset: ${{ matrix.workflow-preset }}
        env:
          QT6_DIR: ${{ steps.install-qt.outputs.install_prefix }}
          VCPKG_ROOT: ${{ github.workspace }}/vcpkg
          CMAKE_CXX_STANDARD: 23

      - name: Upload release artifacts
        if: ${{ contains(matrix.workflow-preset, 'release') }}
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.workflow-preset }}-artifacts
          path: ${{ github.workspace }}/msvc-release/*
